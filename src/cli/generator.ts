import * as fs from "fs";
import * as path from "path";
import {
	ensureDirectoryExists,
	determineOutputPath,
	determineDeclarationPath,
} from "./utils";
import envReader, { defaultPatterns } from "../core/envReader";
import { inferSchema } from "../core/schema";

interface GenerateOptions {
	projectRoot: string;
	outputPath?: string;
	declarationPath?: string;
	useZod?: boolean;
}

export async function generateTypes(options: GenerateOptions) {
	const {
		projectRoot,
		outputPath = determineOutputPath(projectRoot),
		declarationPath = options.declarationPath ||
			determineDeclarationPath(projectRoot),
		useZod = false,
	} = options;

	// Ensure directories exist
	ensureDirectoryExists(outputPath);
	ensureDirectoryExists(declarationPath);

	// Read only .env files, not system environment variables
	const envVars = envReader.readEnvFiles();

	// Log files read
	const loadedFiles = defaultPatterns.map((p) => p.pattern);
	console.log("üìÑ Environment files found:");
	for (const file of loadedFiles) {
		const filePath = path.join(projectRoot, file);
		if (fs.existsSync(filePath)) {
			console.log(`   - ${file} ‚úÖ`);
		} else {
			console.log(`   - ${file} ‚ùå`);
		}
	}

	// Infer schema from environment variables
	const schema = inferSchema(envVars);

	// Generate type definitions
	const typeContent = generateTypeDefinitions(schema);
	const envContent = useZod
		? generateZodEnvFile(schema)
		: generateEnvFile(schema);

	// Write files
	fs.writeFileSync(declarationPath, typeContent);
	fs.writeFileSync(outputPath, envContent);

	return {
		envPath: outputPath,
		declarationPath,
	};
}

function generateTypeDefinitions(schema: Record<string, any>): string {
	let content = `// This file is auto-generated by mrenv
// Do not edit manually

declare namespace NodeJS {
  interface ProcessEnv {\n`;

	for (const [key, value] of Object.entries(schema)) {
		if (!value) continue;
		content += `    ${key}: ${value.type};\n`;
	}

	content += `  }
}\n`;

	return content;
}

function generateEnvFile(schema: Record<string, any>): string {
	let content = `// This file is auto-generated by mrenv
// Do not edit manually

import { createEnv } from "mrenv";

// Schema for environment variables
const schema = ${JSON.stringify(schema, null, 2)};

// Create the typed environment
export const env = createEnv({ 
	schema,
	// Add more configuration here as needed
	// protectedEnv: ['API_KEY', 'DB_PASSWORD'],
	// publicPrefix: 'PUBLIC_',
});

// Export the environment type
export type Env = typeof env;
`;

	return content;
}

function generateZodEnvFile(schema: Record<string, any>): string {
	let content = `// This file is auto-generated by mrenv
// Do not edit manually

import { createEnv } from "mrenv";
import { z } from "zod";

// Zod schema for environment variables
const envSchema = z.object({
`;

	// Generate Zod schema based on inferred types
	for (const [key, value] of Object.entries(schema)) {
		if (!value) continue;

		let zodType: string;
		switch (value.type) {
			case "string":
				zodType = "z.string()";
				break;
			case "number":
				// Add both number and string parsing for flexibility
				zodType =
					"z.preprocess((val) => typeof val === 'number' ? val : Number(val), z.number())";
				break;
			case "boolean":
				// Handle boolean with preprocessing for string values like "true", "false"
				zodType =
					"z.preprocess((val) => { if (typeof val === 'string') return ['true', '1', 'yes'].includes(val.toLowerCase()); return Boolean(val); }, z.boolean())";
				break;
			case "json":
				// Add preprocessing for JSON strings
				zodType =
					"z.preprocess((val) => typeof val === 'string' ? JSON.parse(val) : val, z.any())";
				break;
			default:
				zodType = "z.string()";
		}

		if (value.required === false) {
			zodType += ".optional()";
		}

		content += `  ${key}: ${zodType},\n`;
	}

	content += `});

// Create the typed environment
export const env = createEnv({ 
  schema: envSchema,
  // Add more configuration here as needed
  // protectedEnv: ['API_KEY', 'DB_PASSWORD'],
  // publicPrefix: 'PUBLIC_',
});

// Export the environment type - strongly typed from Zod schema
export type Env = z.infer<typeof envSchema>;

// Export the schema for external usage
export { envSchema };
`;

	return content;
}
